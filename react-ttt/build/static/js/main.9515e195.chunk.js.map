{"version":3,"sources":["components/Chat/Chat.jsx","components/Grid/Grid.jsx","App.js","reportWebVitals.js","index.js"],"names":["Chat","id","action","autoComplete","Grid","console","log","statusDisplay","document","querySelector","gameActive","currentPlayer","gameState","currentPlayerTurn","winningConditions","handleResultValidation","roundWon","i","winCondition","a","b","c","innerHTML","includes","handleCellClick","clickedCellEvent","clickedCell","target","clickedCellIndex","parseInt","getAttribute","handleCellPlayed","querySelectorAll","forEach","cell","addEventListener","data-cell-index","className","PureComponent","App","React","useState","data","setData","useEffect","fetch","then","res","json","message","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9515e195.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Chat = () => {\r\n    return(\r\n        <section id = \"chat-main-container\">\r\n            <div id = \"chat-container\">\r\n            <ul id = \"messages\"></ul>\r\n            <form id=\"form\" action=\"\">\r\n            <p id = \"typing\"></p>\r\n                <input id=\"input\" autoComplete=\"off\" /><button>Send</button>\r\n            </form>\r\n            </div>\r\n        </section>\r\n    )\r\n} ","import React, { PureComponent } from 'react';\r\n\r\nexport default class Grid extends PureComponent {\r\n    componentDidMount(){\r\n        console.log(\"imported\");\r\n    \r\n        const statusDisplay = document.querySelector(\"#game-status\");\r\n        // We will use gameActive to pause the game in case of an end scenario\r\n        let gameActive = true;\r\n        // We will store our current player here, so we know whos turn \r\n        let currentPlayer = \"X\";\r\n        // We will store our current game state here, the form of empty strings in an array will allow us to easily track played cells and validate the game state later on\r\n        let gameState = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\r\n        // Here we have declared some messages we will display to the user during the game.\r\n        // Since we have some dynamic factors in those messages, namely the current player,\r\n        // we have declared them as functions, so that the actual message gets created with \r\n        // current data every time we need it.\r\n        const winningMessage = () => `Player ${currentPlayer} has won!`;\r\n        const drawMessage = () => `Game ended in a draw!`;\r\n        const currentPlayerTurn = () => `It's ${currentPlayer}'s turn`;\r\n        const winningConditions = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6]\r\n        ];\r\n        // We set the inital message to let the players know whose turn it is\r\n        statusDisplay.innerHTML = currentPlayerTurn();\r\n        function handleCellPlayed(clickedCell, clickedCellIndex) {\r\n            // We update our internal game state to reflect the played move, as well as update the user interface to reflect the played move\r\n                gameState[clickedCellIndex] = currentPlayer;\r\n                clickedCell.innerHTML = currentPlayer;\r\n            }\r\n        function handlePlayerChange() {\r\n            currentPlayer = currentPlayer === \"X\" ? \"O\" : \"X\";\r\n            statusDisplay.innerHTML = currentPlayerTurn();\r\n        }\r\n        function handleResultValidation() {\r\n            let roundWon = false;\r\n            for (let i = 0; i <= 7; i++) {\r\n                const winCondition = winningConditions[i];\r\n                let a = gameState[winCondition[0]];\r\n                let b = gameState[winCondition[1]];\r\n                let c = gameState[winCondition[2]];\r\n                if (a === '' || b === '' || c === '') {\r\n                    continue;\r\n                }\r\n                if (a === b && b === c) {\r\n                    roundWon = true;\r\n                    break\r\n                }\r\n            }\r\n            if (roundWon) {\r\n                statusDisplay.innerHTML = winningMessage();\r\n                gameActive = false;\r\n                return;\r\n            }\r\n            // We will check weather there are any values in our game state array that are still not populated with a player sign\r\n            let roundDraw = !gameState.includes(\"\");\r\n            if (roundDraw) {\r\n                statusDisplay.innerHTML = drawMessage();\r\n                gameActive = false;\r\n                return;\r\n            }\r\n            // If we get to here we know that the no one won the game yet, and that there are still moves to be played, so we continue by changing the current player.\r\n            handlePlayerChange();\r\n        }\r\n        function handleCellClick(clickedCellEvent) {\r\n            // We will save the clicked html element in a variable for easier further use\r\n            const clickedCell = clickedCellEvent.target;\r\n            // Here we will grab the 'data-cell-index' attribute from the clicked cell to identify where that cell is in our grid. \r\n            // Please note that the getAttribute will return a string value. Since we need an actual number we will parse it to an \r\n            // integer(number)\r\n            const clickedCellIndex = parseInt(\r\n            clickedCell.getAttribute('data-cell-index')\r\n            );\r\n        // Next up we need to check whether the call has already been played, \r\n        // or if the game is paused. If either of those is true we will simply ignore the click.\r\n            if (gameState[clickedCellIndex] !== \"\" || !gameActive) {\r\n                return;\r\n            }\r\n        // If everything if in order we will proceed with the game flow\r\n            handleCellPlayed(clickedCell, clickedCellIndex);\r\n            handleResultValidation();\r\n        }\r\n        function handleRestartGame() {\r\n            gameActive = true;\r\n            currentPlayer = \"X\";\r\n            gameState = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\r\n            statusDisplay.innerHTML = currentPlayerTurn();\r\n            document.querySelectorAll('.cell')\r\n                .forEach(cell => cell.innerHTML = \"\");\r\n        }\r\n        // And finally we add our event listeners to the actual game cells, as well as our restart button\r\n        document.querySelectorAll('.cell').forEach(cell => cell.addEventListener('click', handleCellClick));\r\n        document.querySelector('#game-restart').addEventListener('click', handleRestartGame);\r\n    }\r\n    render() {\r\n        return(\r\n            <section>\r\n                <h1 id = \"game-title\">Tic Tac Toe</h1>\r\n                <div id = \"game-container\">\r\n                    <div data-cell-index = \"0\" className = \"cell\"></div>\r\n                    <div data-cell-index = \"1\" className = \"cell\"></div>\r\n                    <div data-cell-index = \"2\" className = \"cell\"></div>\r\n                    <div data-cell-index = \"3\" className = \"cell\"></div>\r\n                    <div data-cell-index = \"4\" className = \"cell\"></div>\r\n                    <div data-cell-index = \"5\" className = \"cell\"></div>\r\n                    <div data-cell-index = \"6\" className = \"cell\"></div>\r\n                    <div data-cell-index = \"7\" className = \"cell\"></div>\r\n                    <div data-cell-index = \"8\" className = \"cell\"></div>\r\n                </div>\r\n                <h2 id = \"game-status\"></h2>\r\n                <button id = \"game-restart\">Restart Game</button>\r\n            </section>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport { Chat } from './components/Chat/Chat';\nimport Grid from './components/Grid/Grid';\nimport './css/Main.scss';\n\nfunction App() {\n    const [data, setData] = React.useState(null);\n\n    React.useEffect(() => {\n      fetch(\"/api\")\n        .then((res) => res.json())\n        .then((data) => setData(data.message));\n    }, []);\n\n  return ([\n\t<div id = \"backend-test\">{!data ? \"Loading...\" : data}</div>,\n\t<Grid />,\n  <Chat />\n  ]);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<App />,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}